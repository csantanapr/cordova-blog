<!DOCTYPE html>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
--><html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no, width=device-width">
<meta name="generator" content="joDoc">
<title>Apache Cordova API Documentation</title>
<link rel="stylesheet" type="text/css" href="index.css">
<link rel="stylesheet" type="text/css" href="mobile.css" media="only screen and (max-device-width: 1024px)">
<link rel="stylesheet" type="text/css" href="prettify/prettify.css">
</head>
<body>
        <div id="header">
            <h1><a href="index.html">Apache <strong>Cordova</strong> Documentation</a></h1>
            <small>
                <select><optgroup label="English" value="en">
<option value="edge">edge</option>
<option value="2.8.0">2.8.0</option>
<option value="2.7.0rc1">2.7.0rc1</option>
<option value="2.7.0">2.7.0</option>
<option value="2.6.0rc1">2.6.0rc1</option>
<option value="2.6.0">2.6.0</option>
<option value="2.5.0rc1">2.5.0rc1</option>
<option value="2.5.0">2.5.0</option>
<option value="2.4.0rc1">2.4.0rc1</option>
<option value="2.4.0">2.4.0</option>
<option value="2.3.0rc2">2.3.0rc2</option>
<option value="2.3.0rc1">2.3.0rc1</option>
<option value="2.3.0">2.3.0</option>
<option value="2.2.0rc2">2.2.0rc2</option>
<option value="2.2.0rc1">2.2.0rc1</option>
<option value="2.2.0">2.2.0</option>
<option value="2.1.0rc2">2.1.0rc2</option>
<option value="2.1.0rc1">2.1.0rc1</option>
<option value="2.1.0">2.1.0</option>
<option value="2.0.0rc1">2.0.0rc1</option>
<option value="2.0.0">2.0.0</option>
<option value="1.9.0rc1">1.9.0rc1</option>
<option value="1.9.0">1.9.0</option>
<option value="1.8.1">1.8.1</option>
<option value="1.8.0rc1">1.8.0rc1</option>
<option value="1.8.0">1.8.0</option>
<option value="1.7.0rc1">1.7.0rc1</option>
<option value="1.7.0">1.7.0</option>
<option value="1.6.1">1.6.1</option>
<option value="1.6.0rc1">1.6.0rc1</option>
<option value="1.6.0">1.6.0</option>
<option value="1.5.0rc1">1.5.0rc1</option>
<option value="1.5.0">1.5.0</option>
</optgroup>
<optgroup label="Japanese" value="jp">
<option selected value="2.2.0">2.2.0</option>
<option value="2.1.0">2.1.0</option>
<option value="2.0.0">2.0.0</option>
<option value="1.9.0">1.9.0</option>
<option value="1.8.1">1.8.1</option>
<option value="1.7.0">1.7.0</option>
</optgroup>
<optgroup label="Korean" value="kr"><option value="2.0.0">2.0.0</option></optgroup></select></small>
        </div>
        <div id="subheader">
            <h1>Developing a Plugin on Windows Phone</h1>
            <small><select><option value="Developing%2520a%2520Plugin%2520on%2520Windows%2520Phone">Developing a Plugin on Windows Phone</option>
<option value="Developing%20a%20Plugin%20on%20Windows%20Phone_">      - ネームスペース</option>
<option value="Developing%20a%20Plugin%20on%20Windows%20Phone_c">      - C# での引数の読み取り</option>
<option value="Developing%20a%20Plugin%20on%20Windows%20Phone_c_js">      - C# から JS へ結果を渡す</option>
<option value="Developing%20a%20Plugin%20on%20Windows%20Phone_c">      - プラグインの C# メソッドでのシリアライゼーションエラーの対処</option>
<option value="Developing%20a%20Plugin%20on%20Windows%20Phone_">      - 一歩進んだプラグインの機能</option>
<option value="Developing%20a%20Plugin%20on%20Windows%20Phone_">      - よくある落とし穴</option></select></small>
        </div>

        <div id="sidebar">
            <div class="vertical_divider"></div>
        <h1>API リファレンス</h1>
<ul>
<li><a href="cordova_accelerometer_accelerometer.md.html#Accelerometer">Accelerometer</a></li>
<li><a href="cordova_camera_camera.md.html#Camera">Camera</a></li>
<li><a href="cordova_media_capture_capture.md.html#Capture">Capture</a></li>
<li><a href="cordova_compass_compass.md.html#Compass">Compass</a></li>
<li><a href="cordova_connection_connection.md.html#Connection">Connection</a></li>
<li><a href="cordova_contacts_contacts.md.html#Contacts">Contacts</a></li>
<li><a href="cordova_device_device.md.html#Device">Device</a></li>
<li><a href="cordova_events_events.md.html#Events">Events</a></li>
<li><a href="cordova_file_file.md.html#File">File</a></li>
<li><a href="cordova_geolocation_geolocation.md.html#Geolocation">Geolocation</a></li>
<li><a href="cordova_globalization_globalization.md.html#Globalization">Globalization</a></li>
<li><a href="cordova_media_media.md.html#Media">Media</a></li>
<li><a href="cordova_notification_notification.md.html#Notification">Notification</a></li>
<li><a href="cordova_splashscreen_splashscreen.md.html#Splashscreen">Splashscreen</a></li>
<li><a href="cordova_storage_storage.md.html#Storage">Storage</a></li>
</ul>
<h1>Guides</h1>
<ul>
<li><a href="guide_getting-started_index.md.html#%E5%85%A5%E9%96%80%E3%82%AC%E3%82%A4%E3%83%89">入門ガイド</a></li>
<li><a href="guide_command-line_index.md.html#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E4%BD%BF%E7%94%A8%E3%82%AC%E3%82%A4%E3%83%89">コマンドライン使用ガイド</a></li>
<li><a href="guide_upgrading_index.md.html#%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89%E3%82%AC%E3%82%A4%E3%83%89">アップグレードガイド</a></li>
<li><a href="guide_project-settings_index.md.html#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A">プロジェクトの設定</a></li>
<li><a href="guide_plugin-development_index.md.html#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E9%96%8B%E7%99%BA%E3%82%AC%E3%82%A4%E3%83%89">プラグイン開発ガイド</a></li>
<li><a href="guide_whitelist_index.md.html#%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9B%E3%83%AF%E3%82%A4%E3%83%88%E3%83%AA%E3%82%B9%E3%83%88%E3%82%AC%E3%82%A4%E3%83%89">ドメインホワイトリストガイド</a></li>
<li><a href="guide_cordova-webview_index.md.html#WebView%20%E3%81%AE%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF">WebView の埋め込み</a></li>
<li><a href="_index.html">索引</a></li>
</ul>
</div>

        <div id="scrollable">
            <div id="content">
                <h1><a name="Developing%20a%20Plugin%20on%20Windows%20Phone">Developing a Plugin on Windows Phone</a></h1>

<p>Windows Phone プラグインの開発には、 Cordova のアーキテクチャの理解が必要です。
Cordova-WP7 は Javascript コードをホストし、
ネイティブの API 呼び出しを管理する WebBrowser から構成されています。
C# には継承可能な BaseCommand (<code>WP7CordovaClassLib.Cordova.Commands.BaseCommand</code>) クラスがあり、
このクラスは開発者のために大半の基本的な機能を保持しています。</p>

<ol>
<li>プロジェクトを選択し、右クリックから 'Add -&gt; New Item ...' を選びます
<ul>
<li>どこに追加するかはあなたの自由ですが、できれば 'Plugins' フォルダーに追加してください</li>
</ul>
</li>
<li>'Class' を選択し <code>Echo.cs</code> と名前をつけます
<ul>
<li>このクラスの名前は <code>cordova.exec(win, fail, "Echo", ...)</code> で呼び出す名前と完全に一致している必要があります</li>
</ul>
</li>
<li>
<p>ベースクラスをインクルードします</p>

<pre class="prettyprint"><code>using WP7CordovaClassLib.Cordova;
using WP7CordovaClassLib.Cordova.Commands;
using WP7CordovaClassLib.Cordova.JSON;
</code></pre>
</li>
<li>
<p>BaseCommand クラスを継承します</p>

<pre class="prettyprint"><code>public class Echo : BaseCommand
{
    // ...
}
</code></pre>
</li>
<li>
<p>JS から呼び出し可能なメソッドを追加します</p>

<pre class="prettyprint"><code>public class Echo : BaseCommand
{
    public void echo(string options)
    {
        // 全ての JS から呼び出されるメソッドはこのシグネチャを持つ必要があります
        // publicで, void を返し, string の引数が 1 つ
    }
}
</code></pre>
</li>
</ol>
<h2>
<a name="Developing%20a%20Plugin%20on%20Windows%20Phone_">ネームスペース</a>
</h2>

<p>コマンドのデフォルトのネームスペースは:</p>

<pre class="prettyprint"><code>namespace Cordova.Extension.Commands
{
    // ...
}
</code></pre>

<p>もし別のネームスペースを使用したい場合は、 <code>cordova.exec</code> の呼び出しの際にネームスペースが省略されていないクラス名を指定する必要があります。
例えば、もし以下のように C# のクラスを定義した場合は:</p>

<pre class="prettyprint"><code>namespace com.mydomain.cordovaExtensions
{
    public class Echo : BaseCommand
    {
        // ...
    }
}
</code></pre>

<p>JS では、 exec を以下のように呼び出します:</p>

<pre class="prettyprint"><code>codova.exec(win, fail, "com.mydomain.cordovaExtensions.Echo", ...);
</code></pre>

<h2>
<a name="Developing%20a%20Plugin%20on%20Windows%20Phone_c">C# での引数の読み取り</a>
</h2>

<p>プラグインメソッドから受け取った値は文字列ですが、
JavaScript のコードを見ると、実は文字列の配列を渡そうとしていた、ということがあります。
JS での <code>cordova.exec</code> の呼び出し部分をみると、 <code>[str]</code> を渡していることがわかります:</p>

<pre class="prettyprint"><code>cordova.exec(win, fail, "Echo", "echo", ["input string"]);
</code></pre>

<p>ここで <code>Echo.echo</code> メソッドに渡された文字列を検証すると、
値は実際には次であることがわかります:</p>

<pre class="prettyprint"><code>"[\"input string\"]"
</code></pre>

<p>全ての Javascript の exec 引数は、 C# に渡される前に JSON エンコードされます。</p>

<p>もしこれを期待している値にしたい場合は、デコードする必要があります。
シンプルに JSON のデシリアライゼーションを使います。</p>

<pre class="prettyprint"><code>string optVal = JsonHelper.Deserialize&lt;string[]&gt;(options)[0];
// optVal は "input string" となります
</code></pre>

<h2>
<a name="Developing%20a%20Plugin%20on%20Windows%20Phone_c_js">C# から JS へ結果を渡す</a>
</h2>

<p>ベースクラスの BaseCommand はデータを JS のコールバックハンドラーに渡すためのメソッドを提供しています。
追加情報が必要なく、単にコマンドが成功したことを通知するためには、
シンプルに以下を呼びます:</p>

<pre class="prettyprint"><code>DispatchCommandResult(); // 空のプラグイン結果とともに、成功したとみなされコールバックします
</code></pre>

<p>データを返すには、異なる形式の <code>DispatchCommandResult</code> を呼ぶ必要があります:</p>

<pre class="prettyprint"><code>DispatchCommandResult(new PluginResult(PluginResult.Status.OK, "すべて計画通りにいきました。これは成功ハンドラーに渡される結果データです。"));
</code></pre>

<p>構造化されたデータを JS に渡すには、 JSON 形式にエンコードされている必要があります:
To pass structured object data back to JS, it should be encoded as a JSON string:</p>

<pre class="prettyprint"><code>DispatchCommandResult(new PluginResult(PluginResult.Status.OK, "{result:\"うまくいきました！\"}"));
</code></pre>

<p>エラーが発生したことを通知する場合には、 <code>DispatchCommandResult</code> を <code>PluginResult</code> を伴って呼ぶことができます:</p>

<pre class="prettyprint"><code>DispatchCommandResult(new PluginResult(PluginResult.Status.ERROR, "Echo はエラーが発生したと伝えています"));
</code></pre>

<h2>
<a name="Developing%20a%20Plugin%20on%20Windows%20Phone_c">プラグインの C# メソッドでのシリアライゼーションエラーの対処</a>
</h2>

<p>引数を解析するときに、万が一不正な入力があった場合のためにも try/catch ブロックを
使用するとよいでしょう。以下は、 Cordova の C# コードで使われている方法です:</p>

<pre class="prettyprint"><code>string optVal = null;

try 
{
    optVal = JsonHelper.Deserialize&lt;string[]&gt;(options)[0];
}
catch(Exception)
{
    // 例外をキャッチし、 null 値と例外を一緒に対処します
}

if (optVal == null)
{
    DispatchCommandResult(new PluginResult(PluginResult.Status.JSON_EXCEPTION));
}
else
{
    // ... 任意のコードを続けます
}
</code></pre>

<h2>
<a name="Developing%20a%20Plugin%20on%20Windows%20Phone_">一歩進んだプラグインの機能</a>
</h2>

<p>オーバーライドできるその他の機能については以下を参照してください:</p>

<ol>
<li><a class="external" href="https://github.com/apache/incubator-cordova-wp7/blob/master/templates/standalone/cordovalib/Commands/BaseCommand.cs">BaseCommand.cs</a></li>
</ol>
<p>例えば、 '<a href="cordova_events_events.md.html#pause">pause</a>' や '<a href="cordova_events_events.md.html#resume">resume</a>' といったアプリケーションイベントもオーバーライドできます。</p>

<h3>プラグインのデバッグ</h3>

<p>C# 側でデバッグするには、 Visual Studio のデバッガーを使用します。クラスの任意の箇所に
ブレークポイントを設置してください。</p>

<p>Windows Phone での Javascript のデバッグは少し難しいです。 <code>console.log</code> を使用して
プラグインの状態を出力するなどの方法をとる必要があるでしょう。</p>

<h2>
<a name="Developing%20a%20Plugin%20on%20Windows%20Phone_">よくある落とし穴</a>
</h2>

<ul>
<li>
<p>JavaScript 実装時に、プラグインに渡す引数を決める際には十分に注意してください。
大半のデバイスは cordova.exec に渡される引数は配列であると期待していますが、
もし配列の中に異なる形式のオブジェクトが含まれる場合は、
デシリアライズが非常に困難、もしくは不可能となってしまいます。</p>

<pre class="prettyprint"><code>cordova.exec(win, fail, "ServiceName", "MethodName", ["これは文字列です", 54, {literal:'trouble'}]);
</code></pre>

<ul>
<li>
<p>これは、以下のようなデコードが非常に困難な文字列を C# 側で受け取ることを意味します:</p>

<pre class="prettyprint"><code>"[\"これは文字列です\", 54, { literal:'trouble' }]"
</code></pre>
</li>
<li>
<p>exec を呼び出す前に、全てのパラメーターを文字列に変換することを考慮してください:</p>

<pre class="prettyprint"><code>cordova.exec(win, fail, "ServiceName", "MethodName", ["これは文字列です", "54", "{literal:'trouble'}"]) ;


string[] optValues = JsonHelper.Deserialize&lt;string[]&gt;(options);
</code></pre>
</li>
</ul>
</li>
<li><p>exec を呼び出す前に JavaScript コード内でパラメーターのチェックをすることを心がけましょう。
これは JS のコードをプラグインの異なるネイティブ実装間で
再利用しやすくするという利点もあります。</p></li>
</ul>
</div>
        </div>

        <!-- Functionality and Syntax Highlighting -->
        <script type="text/javascript" src="index.js"></script><script type="text/javascript" src="prettify/prettify.js"></script>
</body>
</html>
